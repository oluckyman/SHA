//
//  MainInteractorTests.swift
//  SHA
//
//  Created by Ilyá Belsky on 4/25/18.
//  Copyright (c) 2018 Ilyá Belsky. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SHA
import XCTest

class MainInteractorTests: XCTestCase {
    // MARK: - Subject under test

    var sut: MainInteractor!

    // MARK: - Test lifecycle

    override func setUp() {
        super.setUp()
        setupMainInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: - Test setup

    func setupMainInteractor() {
        sut = MainInteractor()
    }

    // MARK: - Test doubles

    class MainPresentationLogicSpy: MainPresentationLogic {
        var presentRecordCalled = false
        var main_fetchRecord_response: Main.FetchRecord.Response?

        func presentRecord(response: Main.FetchRecord.Response) {
            presentRecordCalled = true
            main_fetchRecord_response = response
        }
    }
    
    class RecordsWorkerSpy: RecordsWorker {
        var fetchRecordsCalled = false
        var fetchResultRecords: [Record] = []
        
        override func fetchRecords(completionHandler: @escaping ([Record]) -> Void) {
            fetchRecordsCalled = true
            completionHandler(fetchResultRecords)
        }
    }

    // MARK: - Tests

    func testFetchRecordAsksWorkerToFetchRecords() {
        // Given
        let spy = RecordsWorkerSpy(recordsStore: RecordsMemStore())
        sut.worker = spy
        let request = Main.FetchRecord.Request()
        
        // When
        sut.fetchRecord(request: request)
        
        // Then
        XCTAssertTrue(spy.fetchRecordsCalled, "fetchRecord(request:) should ask the worker to fetch the records")
    }
    
    func testFetchRecordAsksPresenterToFormatEmptyRecordWhenNoRecords() {
        // Given
        let presenterSpy = MainPresentationLogicSpy()
        sut.presenter = presenterSpy
        let workerSpy = RecordsWorkerSpy(recordsStore: RecordsMemStore())
        sut.worker = workerSpy
        let request = Main.FetchRecord.Request()
        
        // When
        sut.fetchRecord(request: request)
        
        // Then
        XCTAssertTrue(presenterSpy.presentRecordCalled, "fetchRecord(request:) should ask the presenter to format the record")
        let record = presenterSpy.main_fetchRecord_response?.record
        XCTAssertEqual(record, Record(date: Date(), full: 0, express: 0))
    }
    
    func testFetchRecordPopulatesRecords() {
        // Given
        let workerSpy = RecordsWorkerSpy(recordsStore: RecordsMemStore())
        workerSpy.fetchResultRecords = [
            Record(), Record(), Record()
        ]
        sut.worker = workerSpy
        let request = Main.FetchRecord.Request()
        
        // When
        sut.fetchRecord(request: request)
        
        // Then
        XCTAssertEqual(sut.records, workerSpy.fetchResultRecords)
    }
    
    // should add empty today record when there are no records
    // should set current record to the record from records with current date
    
    func testIncrementFullAsksPresenterToFormatRecord() {
        // Given
        let presenterSpy = MainPresentationLogicSpy()
        sut.presenter = presenterSpy
        sut.currentRecord = Record(date: Date(), full: 42, express: 0)
        let request = Main.IncrementFull.Request()
        
        // When
        sut.incrementFull(request: request)
        
        // Then
        XCTAssertTrue(presenterSpy.presentRecordCalled, "incrementFull(request:) should ask the presenter to format a record")
        let record = presenterSpy.main_fetchRecord_response?.record
        XCTAssertEqual(record, Record(date: Date(), full: 42 + 1, express: 0))
    }

    func testResetFullAsksPresenterToFormatRecord() {
        // Given
        let presenterSpy = MainPresentationLogicSpy()
        sut.presenter = presenterSpy
        sut.currentRecord = Record(date: Date(), full: 42, express: 0)
        let request = Main.ResetFull.Request()
        
        // When
        sut.resetFull(request: request)
        
        // Then
        XCTAssertTrue(presenterSpy.presentRecordCalled, "resetFull(request:) should ask the presenter to format a record")
        let record = presenterSpy.main_fetchRecord_response?.record
        XCTAssertEqual(record, Record(date: Date(), full: 0, express: 0))
    }

    func testNavigateBackAsksPresenterToFormatRecord() {
        // Given
        let presenterSpy = MainPresentationLogicSpy()
        sut.presenter = presenterSpy
        sut.currentRecord = Record(date: Date(from: "2018-01-01")!, full: 0, express: 0)
        let request = Main.NavigateBack.Request()
        
        // When
        sut.navigateBack(request: request)
        
        // Then
        XCTAssertTrue(presenterSpy.presentRecordCalled, "navigateBack(request:) should ask the presenter to format a record")
        let record = presenterSpy.main_fetchRecord_response?.record
        XCTAssertEqual(record, Record(date: Date(from: "2017-12-31")!, full: 0, express: 0))
    }

}
