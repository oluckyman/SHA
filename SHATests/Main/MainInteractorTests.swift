//
//  MainInteractorTests.swift
//  SHA
//
//  Created by Ilyá Belsky on 4/25/18.
//  Copyright (c) 2018 Ilyá Belsky. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SHA
import XCTest

class MainInteractorTests: XCTestCase {
    // MARK: - Subject under test

    var sut: MainInteractor!

    // MARK: - Test lifecycle

    override func setUp() {
        super.setUp()
        setupMainInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: - Test setup

    func setupMainInteractor() {
        sut = MainInteractor()
    }

    // MARK: - Test doubles

    class MainPresentationLogicSpy: MainPresentationLogic {
        var presentRecordCalled = false
        var main_fetchRecords_response: Main.FetchRecords.Response!

        func presentRecord(response: Main.FetchRecords.Response) {
            presentRecordCalled = true
            main_fetchRecords_response = response
        }
    }
    
    class RecordsWorkerSpy: RecordsWorker {
        var fetchRecordsCalled = false
        
        override func fetchRecords(completionHandler: @escaping ([Record]) -> Void) {
            fetchRecordsCalled = true
            completionHandler([Record]())
        }
    }

    // MARK: - Tests

    func testFetchRecordsAsksWorkerToFetchRecords() {
        // Given
        let spy = RecordsWorkerSpy(recordsStore: RecordsMemStore())
        sut.worker = spy
        let request = Main.FetchRecords.Request()
        
        // When
        sut.fetchRecords(request: request)
        
        // Then
        XCTAssertTrue(spy.fetchRecordsCalled, "fetchRecords(request:) should ask the worker to fetch the records")
    }
    
    func testFetchRecordsAsksPresenterToFormatEmptyRecordWhenNoRecords() {
        // Given
        let presenterSpy = MainPresentationLogicSpy()
        sut.presenter = presenterSpy
        let workerSpy = RecordsWorkerSpy(recordsStore: RecordsMemStore())
        sut.worker = workerSpy
        let request = Main.FetchRecords.Request()
        
        // When
        sut.fetchRecords(request: request)
        
        // Then
        XCTAssertTrue(presenterSpy.presentRecordCalled, "fetchRecords(request:) should ask the presenter to format the record")
        let record = presenterSpy.main_fetchRecords_response.record
        XCTAssertEqual(record, Record(date: Date(), full: 0, express: 0))
    }

}
