//
//  MainPresenter.swift
//  SHA
//
//  Created by Ilyá Belsky on 4/25/18.
//  Copyright (c) 2018 Ilyá Belsky. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainPresentationLogic {
    func presentRecord(response: Main.FetchRecord.Response)
    func presentShareReport(response: Main.Share.Response)
}

class MainPresenter: MainPresentationLogic {
    weak var viewController: MainDisplayLogic?
    
    let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.setLocalizedDateFormatFromTemplate("EdMMM")
        return dateFormatter
    }()
    
    let messageFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.setLocalizedDateFormatFromTemplate("MMMM YYYY")
        return dateFormatter
    }()
    
    let reportFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM"
        return dateFormatter
    }()

    // MARK: - Record
    
    func presentRecord(response: Main.FetchRecord.Response) {
        let record = response.record
        let date = record.date
        let full = record.full
        let express = record.express
        let displayDate = dateFormatter.string(from: date.rawDate)
        let displayFull = full == 0 ? "Full" : "Full x \(full)"
        let displayExpress = express == 0 ? "Express" : "Express x \(express)"
        
        let viewModel = Main.FetchRecord.ViewModel(date: displayDate, full: displayFull, express: displayExpress)
        viewController?.displayRecord(viewModel: viewModel)
    }
    
    // MARK: - Share
    
    func presentShareReport(response: Main.Share.Response) {
        let reportDate = reportFormatter.string(from: response.date.rawDate)
        let url = FileManager.default.temporaryDirectory.appendingPathComponent("SHA \(reportDate).csv")
        let message = messageFormatter.string(from: response.date.rawDate)
        
        let csvText = formatCsv(from: response.records)
        do {
            try csvText.write(to: url, atomically: true, encoding: .utf8)
        } catch {
            print("Cannot write to \(url)")
            print("\(error)")
        }

        let viewModel = Main.Share.ViewModel(url: url, message: message)
        viewController?.displayShareView(viewModel: viewModel)
    }
    
    private func formatCsv(from records: [Record]) -> String {
        var csvText = "Fecha,Albarán,Descripción del servicio,Unidades,Coste sin IVA,I.V.A.,Importe total sin iva\n"
        var row = 2
        records.forEach { record in
            if record.full > 0 {
                csvText += "\(record.date),,Traducción Full,\(record.full),20,0.21,=E\(row)*D\(row)\n"
                row += 1
            }
            if record.express > 0 {
                csvText += "\(record.date),,Traducción Express,\(record.express),10,0.21,=E\(row)*D\(row)\n"
                row += 1
            }
        }
        return csvText
    }
}
